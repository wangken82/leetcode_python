
class Solution:
    def uniquePathsIII(self, grid: List[List[int]]) -> int:
        m = len(grid)
        n = len(grid[0])
        steps = 1
        direction = [-1,0,1,0,-1]  #x,x+1 represent the new location
        
        for i in range(m):
            for j in range(n):
                if grid[i][j] == 0:
                    steps += 1
                elif grid[i][j] == 1:
                    x,y = i,j
        
        
        
        
        def find(x,y,grid,step):
            #this path is failed or illegal
            if (x>=m) or (x<0) or (y >=n) or (y<0) or grid[x][y] == -1:
                return 0
            
            if grid[x][y] == 2:
                return 1 if step ==0 else 0
            grid[x][y] = -1   # set this as -1 to indict the child dfs not step back
            path = find(x-1,y,grid,step-1) +find(x+1,y,grid,step-1) + find(x,y-1,grid,step-1) +find(x,y+1,grid,step-1)
            grid[x][y] = 0 
            
            return path
        
        return find(x,y,grid,steps)
                
