Evaluate the value of an arithmetic expression in Reverse Polish Notation.

Valid operators are +, -, *, /. Each operand may be an integer or another expression.

Note:

Division between two integers should truncate toward zero.
The given RPN expression is always valid. That means the expression would always evaluate to a result and there won't be any divide by zero operation.
Example 1:

Input: ["2", "1", "+", "3", "*"]
Output: 9
Explanation: ((2 + 1) * 3) = 9
Example 2:

Input: ["4", "13", "5", "/", "+"]
Output: 6
Explanation: (4 + (13 / 5)) = 6
Example 3:

Input: ["10", "6", "9", "3", "+", "-11", "*", "/", "*", "17", "+", "5", "+"]
Output: 22
Explanation: 
  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22

========================================

def cal(nums:str):
    
    i=2
    while len(nums)>1:    
        if nums[i] == "+":
            nums[i] = nums[i-1] + nums[i-2]
            nums.pop(i-1)
            nums.pop(i-2)
            i -=2
        elif nums[i] == '-':
            nums[i] = nums[i-2] - nums[i-1]
            nums.pop(i-1)
            nums.pop(i-2)
            i -=2
        elif nums[i] == '*':
            nums[i] = nums[i-1] * nums[i-2]
            nums.pop(i-1)
            nums.pop(i-2)
            i -=2
        elif nums[i] == '/':
            if ( nums[i-2] > 0) and ( nums[i-1]>0 ):
                nums[i] = (nums[i-2] // nums[i-1]) 
            else:
                nums[i] = (-nums[i-2] // nums[i-1])
            nums.pop(i-1)
            nums.pop(i-2)
            i -=2
        else:
            i += 1
    print(nums)       
            

cal([2,1,'+',3,'*'])
cal([4,13,5,'/','+'])
cal([10,6,9,3,'+',-11,'*','/','*',17,'+',5,'+'])

output:
[9]
[6]
[22]
