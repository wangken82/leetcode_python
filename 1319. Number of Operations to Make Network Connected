class Solution:
    def makeConnected(self, n: int, connections: List[List[int]]) -> int:
        parent = list(range(n))
        self.count = n
        #count used for track how many isolated nodes, for n nodes, we need n-1 cables to connect them
        #begin with all node isolated, if we have u->v connected, then isolated nodes-1
        self.redundant = 0
        def find(x):
            if x != parent[x]:
                parent[x] = find(parent[x])
            return parent[x]
        
        def union(x,y):
            rootx = find(x)
            rooty = find(y)
            if rootx != rooty:
                parent[rootx] = rooty
                self.count -= 1
            else:
                self.redundant +=1
        
        for x, y in connections:
            union(x, y)
        
        if self.redundant >= self.count - 1:
            return self.count - 1
        else:
            return -1
