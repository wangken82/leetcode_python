#                       1
#                 /         \
#                2          3
#              /  \      /    \
#            4     5    6     7
#                               \
#                                8

class Node(object):
    def __init__(self,value):
        self.value = value
        self.left = None
        self.right = None

class BinaryTree(object):
    def __init__(self,root):
        self.root = Node(root)
        
    def preorder_print(self,start,traversal):
        """Root--->left--->right 1-->2-->4-->5-->3-->6-->7-->8-->"""
        if start:
            traversal += (str(start.value) + "-->")
            traversal = self.preorder_print(start.left,traversal)
            traversal = self.preorder_print(start.right,traversal)
        return traversal
    
    
    def in_order_print(self,start,traversal):
        """left-->Root-->Right  4-->2-->5-->1-->6-->3-->7-->8-->"""
        if start:
            traversal = self.in_order_print(start.left,traversal)
            traversal += (str(start.value) + "-->")
            traversal = self.in_order_print(start.right,traversal)
        return traversal
    
    def postorder_print(self,start,traversal):
        """Left->right->root 4-->5-->2-->6-->8-->7-->3-->1"""
        if start:
            traversal = self.postorder_print(start.left,traversal)
            traversal = self.postorder_print(start.right,traversal)
            traversal += (str(start.value) + "-->")
        return traversal
        
tree = BinaryTree(1)
tree.root.left = Node(2)
tree.root.right = Node(3)
tree.root.left.left = Node(4)
tree.root.left.right = Node(5)
tree.root.right.left = Node(6)
tree.root.right.right = Node(7)
tree.root.right.right.right = Node(8)
print(tree.preorder_print(tree.root,""))
print(tree.in_order_print(tree.root,""))
print(tree.postorder_print(tree.root,""))

1-->2-->4-->5-->3-->6-->7-->8-->
4-->2-->5-->1-->6-->3-->7-->8-->
4-->5-->2-->6-->8-->7-->3-->1-->
