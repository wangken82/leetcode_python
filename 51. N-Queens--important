
class Solution:
    def solveNQueens(self, n: int) -> List[List[str]]:
        board =[["."] *n for _ in range(n)]
        self.result = []
        
        """
        example for n=4
diag = x+y, {0: [(0, 0)], 1: [(0, 1), (1, 0)], 2: [(0, 2), (1, 1), (2, 0)], 3: [(0, 3), (1, 2), (2, 1), (3, 0)], 4: [(1, 3), (2, 2), (3, 1)], 5: [(2, 3), (3, 2)], 6: [(3, 3)]})
diag2=x-y+n-1 {5: [(0, 0), (1, 1), (2, 2), (3, 3)], 4: [(0, 1), (1, 2), (2, 3)], 3: [(0, 2), (1, 3)], 2: [(0, 3)], 6: [(1, 0), (2, 1), (3, 2)], 7: [(2, 0), (3, 1)], 8: [(3, 0)]})
        """
        diag = [0] * (2*n-1)
        diag2 = [0] * (2*n-1)
        cols = [0] *n    #check whether col is occupied, 0 avaiable,1 used.

        def check_av(x,y):
            if not cols[y] and not diag[x+y] and not diag2[x-y+n-1]:
                return True
            else:
                return False
                       
        
        def backtrack(line,board,cols,diag,diag2):
            if line == n:
                self.result.append(["".join(row) for row in board])
                #print(self.result)
                return
            
            for col in range(n):
                if check_av(line,col):
                    board[line][col] = "Q"
                    cols[col] = 1
                    diag[line+col] = 1
                    diag2[line-col+n-1] = 1
                    backtrack(line+1,board,cols,diag,diag2)
                    board[line][col] = "."
                    cols[col] = 0
                    diag[line+col] = 0
                    diag2[line-col+n-1] = 0
        
        backtrack(0,board,cols,diag,diag2)
        return self.result
                            
