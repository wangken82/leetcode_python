Given a set of distinct integers, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.

Example:

Input: nums = [1,2,3]
Output:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]


class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:
        global result
        result = []
        
        
        def dfs(n,start,curr):
            if len(curr) == n:
                result.append(curr.copy())
                # or use result.append(curr[:]) . if you use result.append(curr) the result will be wrong, as curr is changing.
                return
            
            for i in range(start,len(nums)):
                curr.append(nums[i])
                dfs(n,i+1,curr)
                curr.pop(-1)
                
            
        
        for i in range(len(nums)+1):
            dfs(i,0,[])
        return result
