# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def recoverTree(self, root: TreeNode) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        first,second = None,None
        firstTime = True
        pre = TreeNode(float('-inf'))
        
        while root != None:
            if root.left != None:
                temp = root.left
                while (temp.right != None and temp.right != root):
                    temp = temp.right
                if temp.right == None:
                    temp.right = root
                    root = root.left
                else:
                    temp.right =None
                    if (pre.val > root.val and firstTime):
                        first = pre
                        firstTime = False
                    if (pre.val > root.val) and not firstTime:
                        second = root
                    pre = root
                    root = root.right
            else:
                if (pre.val > root.val and firstTime):
                    first = pre
                    firstTime = False
                if (pre.val > root.val) and not firstTime:
                    second = root
                pre = root
                root = root.right
        if first and second:
            first.val,second.val = second.val,first.val
