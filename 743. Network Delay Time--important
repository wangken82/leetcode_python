solution 1: use bell-more.  repeat N times, N=node.  mark each node as infinite，for [u,v,time]  if result[v] >result[u]+time,
then result[v] = result[u]+time.  There is a limitation for bell-more, if there is a cycle with negative sum, then could not use

from collections import defaultdict
import heapq
class Solution:
    def networkDelayTime(self, times: List[List[int]], N: int, K: int) -> int:        
        result = [float('inf')] * (N+1)
        result[K] = 0
        
        for i in range(N):
            for time in times:
                u = time[0]
                v = time[1]
                t = time[2]
                if result[v] > result[u]+t:
                    result[v] = result[u]+t
        
        maxval = max(result[1:])
        
        return -1 if maxval == float('inf') else maxval

        
   solution2. Dijkstra
   先mark result[K] = 0 , 然后在所有的result里面找到最小的定点，  把graph[u] 里面对应的定点v的值都检查一遍
   假如 result[v] > result[u] + u->v的值 ，那么result[v]= result[u]+u->v
   
from collections import defaultdict
import heapq
class Solution:
    def networkDelayTime(self, times: List[List[int]], N: int, K: int) -> int:        
        graph = collections.defaultdict(list)
        for u,v,time in times:
            graph[u].append([v,time])
            
        
        seen = [False] * (N+1)
        result = [float('inf')] * (N+1)
        
        result[K] = 0
        
        stack = [[0,K]]
        
        while stack:
            time,u = heapq.heappop(stack)
            seen[u] = True
            for item in graph[u]:
                v = item[0]
                val = item[1]
                if result[v] > result[u] + val and not seen[v]:
                    result[v] = result[u] + val
                    heapq.heappush(stack,[result[u]+val,v])
        
        maxval = max(result[1:])
        
        return maxval if maxval != float('inf') else -1
