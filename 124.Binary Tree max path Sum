Given a non-empty binary tree, find the maximum path sum.

For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.

Example 1:

Input: [1,2,3]

       1
      / \
     2   3

Output: 6
Example 2:

Input: [-10,9,20,null,null,15,7]

   -10
   / \
  9  20
    /  \
   15   7

Output: 42


import sys
max = sys.maxsize

class TreeNode(object):
    def __init___(self,x):
        self.val=x
        self.left=None
        self.right=None
        
class Solution(object):
    def _maxPathSum(self,root):
        if not root:
            return max
        l=max(0,self._maxPathSum(root.left))
        r=max(0,self._maxPathSum(root.right))
        self.ans=max(self.ans,root.val+l+r)  #self.ans used to record the max value
        return (root.val+max(l,r))
    
    def maxPathSum(self,root):
        self.ans= -max
        self._maxPathSum(root)
        return self.ans
