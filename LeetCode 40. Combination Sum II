Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

Each number in candidates may only be used once in the combination.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8,
A solution set is:
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]


=======================
class Solution:
    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        global result
        result = set()
        size = len(candidates)
        visited = [0] * size
        
        def dfs(curr,target,visited):
            if target == 0:
                curr.sort()
                result.add(tuple(curr))  #you could not add list into set, but you can add tuple to set
                return
            if target < 0:
                return
            
            for i in range(size):
                if visited[i] == 1:
                    continue
                visited[i] = 1
                
                dfs(curr+[candidates[i]],target-candidates[i],visited)
                
                visited[i] = 0
        
        candidates.sort()
        dfs([],target,visited)
        return result
