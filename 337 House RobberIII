# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

#flag 0 means node not selected
#flag 1 means you can use this node ,or not use,
class Solution(object):
    def rob(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        self.mydict0 = {}
        self.mydict1 = {}
        return self.helper(root,1)
    
    def helper(self,root,flag):
        if not root:
            return 0
        if (flag == 1) and self.mydict1.get(root):
            return self.mydict1[root]
        if (flag == 0) and self.mydict0.get(root):
            return self.mydict0[root]
            
        if (flag == 0): 
            value = self.helper(root.left,1)+self.helper(root.right,1)
            self.mydict0[root] = value
            return value
        else:
            choose_root = root.val + self.helper(root.left,0)+self.helper(root.right,0)
            not_choose_root = self.helper(root.left,1)+self.helper(root.right,1)
            value2 = max(choose_root,not_choose_root)
            self.mydict1[root] = value2
            return value2
