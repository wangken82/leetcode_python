Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
 

Example:

MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.

==============================================================================================

class MinStack:

    def __init__(self):
        self.stack = []
        

    def push(self, x: int) -> None:
        self.stack += [x]  #add the latest to the end of the list
        

    def pop(self) -> None:
        self.stack.pop()  #pop always popup the last one. if you need specific one ,then use pop(index)
        

    def top(self) -> int:
        return self.stack[-1]
        

    def getMin(self) -> int:
        return min(self.stack)
    
minStack = MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
print(minStack.getMin());  # --> Returns -3.
minStack.pop();
print(minStack.top());      #--> Returns 0.
print(minStack.getMin());   #--> Returns -2.
