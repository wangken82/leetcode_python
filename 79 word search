Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

Example:

board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]

Given word = "ABCCED", return true.
Given word = "SEE", return true.
Given word = "ABCB", return false.

class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        start = []
        m = len(board)
        if m == 0:
            return False
        n = len(board[0])
        visited =[[0] * n for _ in range(m)] 
        #global result
        self.result = False
        for i in range(m):
            for j in range(n):
                if board[i][j] == word[0]:
                    start.append((i,j))
        print(f"start is {start}")
        def dfs(start,visited,mystr):
            #print(f"in dfs, visited is {visited} ,str is {mystr}")
            if self.result:
                print("Already True igenore,")
                return
            row = start[0]
            line = start[1]
            if board[row][line] != mystr[0]:
                return
            if len(mystr) == 1:
                self.result = True
                print("HAHHAAHa")
                return
            #visited[row][line] = 1
            for x,y in [(-1,0),(1,0),(0,1),(0,-1)]:
                newrow = row+x
                newline = line +y
                if newrow<0 or newrow>=m or newline<0 or newline>=n or visited[newrow][newline] :
                    continue
                #print(newrow,newline)
               
                visited[newrow][newline] = 1
                dfs((newrow,newline),visited,mystr[1:])
                visited[newrow][newline] = 0
         
        for i,j in start:
            visited[i][j] = 1
            dfs((i,j),visited,word)
            visited[i][j] = 0
        return self.result
        
