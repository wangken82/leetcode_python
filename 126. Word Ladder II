

Share
Given two words (beginWord and endWord), and a dictionary's word list, find all shortest transformation sequence(s) from beginWord to endWord, such that:

Only one letter can be changed at a time
Each transformed word must exist in the word list. Note that beginWord is not a transformed word.
Note:

Return an empty list if there is no such transformation sequence.
All words have the same length.
All words contain only lowercase alphabetic characters.
You may assume no duplicates in the word list.
You may assume beginWord and endWord are non-empty and are not the same.
Example 1:

Input:
beginWord = "hit",
endWord = "cog",
wordList = ["hot","dot","dog","lot","log","cog"]

Output:
[
  ["hit","hot","dot","dog","cog"],
  ["hit","hot","lot","log","cog"]
]
Example 2:

Input:
beginWord = "hit"
endWord = "cog"
wordList = ["hot","dot","dog","lot","log"]

Output: []

Explanation: The endWord "cog" is not in wordList, therefore no possible transformation.


easy understanding solution 1
================================
#import string
class Solution(object):
    def findLadders(self, beginWord, endWord, wordList):
        """
        :type beginWord: str
        :type endWord: str
        :type wordList: List[str]
        :rtype: List[List[str]]
        """
        wordList = set(wordList)
        if endWord not in wordList:
            return []
        
        d = {}
        d[beginWord] = [[beginWord]]
        
        if beginWord in wordList:
            wordList.remove(beginWord)
        
        while d:
            newLayer = collections.defaultdict(list)
            for key in d:
                if key == endWord:
                    #print(key)
                    #print(d[key])
                    return d[key]
                for i in range(len(key)):
                    for ch in string.ascii_lowercase:
                        word = key[:i] + ch + key[i+1:]
                        if word in wordList:
                            newLayer[word] += [curr + [word] for curr in d[key]]
                            print(newLayer[word])
            wordList -= set(newLayer.keys())
            d = newLayer

        return []


-------------------------------
solution 2, much more quick than first solution
from collections import defaultdict
class Solution:
    def findLadders(self, beginWord: str, endWord: str, wordList: List[str]) -> List[List[str]]:
        if endWord not in wordList: return []
        
        graph = defaultdict(list)
        for word in wordList:
            for i in range(len(word)):
                nword = word[:i] + "*" + word[i+1:]
                graph[nword].append(word)
                
             
        ans = []
        front0, front1 = {beginWord: [[beginWord]]}, {endWord:[[endWord]]} #word & sequences ending in word
        seen = {beginWord, endWord}  #seen is a set
        reverse = False 
        
        while front0 and front1 and not ans:
            if len(front0) > len(front1): front0, front1, reverse = front1, front0, not reverse 
            temp = defaultdict(list)
            print(front0)
            for word, seq in front0.items(): 
                for i in range(len(word)): 
                    newword = word[:i] + "*" + word[i+1:]
                    for node in graph.get(newword,[]): 
                        if node in front1: 
                            ans.extend([y + x[::-1] if reverse else x + y[::-1] for x in seq for y in front1[node]])
                        if node in seen: continue
                        print("now seq",seq)
                        for x in seq: 
                            temp[node].append(x + [node])
                            
                        #print(temp)
            seen |= set(temp.keys()) #has to be updated level-by-level,add the keys to seen set
            front0 = temp 
        return ans 
