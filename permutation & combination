Permutations

Given a collection of distinct integers, return all possible permutations.

Example:

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]

#####################code#################
class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        size = len(nums)
        visited = [0] * size
        result = []
        def dfs(curr,nums):
            if len(curr) == size:
                result.append(curr[:])
                return
            
            for i in range(size):
                if visited[i]:
                    continue
                visited[i] = 1
                curr.append(nums[i])
                dfs(curr,nums)
                curr.pop()
                visited[i] = 0
        
        dfs([],nums)
        return result
###########################################################
Subset
[[],[1],[1,2],[1,2,3],[1,3],[2],[2,3],[3]]


code
class Solution:
    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:
        result = []
        def dfs(curr,nums):
            result.append(curr[:])
            if len(nums) == 0:
                return
            
            for i in range(len(nums)):
                if i>0 and nums[i] == nums[i-1]:
                    continue
                dfs(curr+[nums[i]],nums[i+1:])
        
        dfs([],sorted(nums))
        return result
        

