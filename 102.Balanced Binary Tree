Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as:

a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Example 1:

Given the following tree [3,9,20,null,null,15,7]:

    3
   / \
  9  20
    /  \
   15   7
Return true.

Example 2:

Given the following tree [1,2,2,3,3,null,null,4,4]:

       1
      / \
     2   2
    / \
   3   3
  / \
 4   4
Return false.



class tree(object):
    def __init__(self,x):
        self.val=x
        self.left=None
        self.right=None

class solution(object):
    def isBalanced(self,root:tree)->bool:
        
        #define to check the max depth
        def depth(root):
            if not root:
                return 0
            else:
                return max(depth(root.left),depth(root.right))+1
        
        if root:
            return depth(root.left)-depth(root.right) in [-1,0,1] and self.isBalanced(root.left) and self.isBalanced(root.right)
        return True # default is True
