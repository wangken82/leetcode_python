"""
    If addtional path exist in a tree topogy, it will have 2 situtations.
    1. Addtional path on Root node
    2. Addtional path on Non-root node

    if number 1, it will create a cycle, just like   5<-1->2->3->4->1
    if number 2, there will be a node with 2 father. It has 2.1 and 2.2 situtation.

    2.1 No cycle existed,  like  1->2, 1->3, 2->3   we just need to remove the last duplicate path
    2.2 if cycle existed,  like  2->1->4->2     3->2,  here node 2 has two father node, we need to delete the path in cycle.
"""

from collections import defaultdict
class Solution:
    def findRedundantDirectedConnection(self, edges: List[List[int]]) -> List[int]:
        graph = defaultdict(list)

        root = {i:0 for i in range(1,len(edges)+1)}
        ans1 = []   #store the first u-v for dup
        ans2 = []   #store second  u-v for dup 


        for edge in edges:
            u,v = edge
            if root[v] > 0:
                ans1 = [root[v],v]
                ans2 = [u,v]
            else:
                root[v] = u
        
        # select any node in the tree, this function will return the root node of the tree
        def find_root(node):
            seen = set()
            while node not in seen and node in root:
                seen.add(node)
                node = root[node]
            return node,seen

        top = find_root(1)[0]    #get the root node
        print(f"root is {root},top is {top}")
        # if no duplicate path on single node, then it must the root node in cycle
        if len(ans1) == 0: 
            return [root[top],top]

        #check cycle , then must have duplicated, we recoreded ans1 and ans2. check the cycle there

        fathernode1 = ans1[0]
        fathernode2 = ans2[0]
        dupnode = ans1[1]

        def check_cycle(u,root):
            seen = set()
            while u in root:
                u = root[u]
                if u not in seen:
                    seen.add(u)
                else:
                    return True
            return False

        if not check_cycle(fathernode1,root) and not check_cycle(fathernode2,root):
            return ans2
        if check_cycle(fathernode1,root):
            return ans1
        else:
            return ans2
    
    
        
    
    
