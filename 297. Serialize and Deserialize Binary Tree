Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

Example: 

You may serialize the following tree:

    1
   / \
  2   3
     / \
    4   5

as "[1,2,3,null,null,4,5]"
Clarification: The above format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.

Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.


class TreeNode(object):
     def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution(object):
    def serialize(self,root,data:list):
        if not root:
            data.append("x")
        else:
            data.append(str(root.val))
            data = self.serialize(root.left, data)
            data = self.serialize(root.right,data)
        return data
    
    def formTree(self,data):
        def build():
            if not data:
                return
            val = data.pop(0)
            if val == "x":
                return
            else:
                cur = TreeNode(val,None,None)
            cur.left = build()
            cur.right = build()
            return cur
        root = build()
        return root
        
a = TreeNode(1)
a.left = TreeNode(2)
a.right = TreeNode(3)
a.right.left = TreeNode(4)
a.right.right = TreeNode(5)
b = Solution()
newstr = b.serialize(a,[])
print(f"Newstr is {newstr}")
root = b.formTree(newstr)
newstr2 = b.serialize(root,[])
print(f"newstr2 is {newstr2}")
